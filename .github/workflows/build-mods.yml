---
name: Build mods

on:
  workflow_dispatch:
    inputs:
      mods:
        type: string
        description: mod names to build
  push:
    paths:
      - "sources/*"
    branches:
      - main
  pull_request:

env:
  LIBCLANG_RT_BUILTINS_WASM32_A_URL: http://cdn.jsdelivr.net/gh/jedisct1/libclang_rt.builtins-wasm32.a/precompiled/llvm-19/libclang_rt.builtins-wasm32.a
  WASI_SDK_URL: https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-25/wasi-sdk-25.0-x86_64-linux.deb

jobs:
  builds:
    name: Assemble build matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.builds.outputs.matrix }}
      mods: ${{ steps.builds.outputs.mods }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}
      - name: Get changed files
        if: ${{ github.event_name }} == "push"
        id: changed_files_action
        uses: tj-actions/changed-files@v45
        with:
          files: sources/*
      - name: Assemble build matrix
        id: builds
        run: |
          # Figure out which manifests need building
          if [[ "${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "pull_request" ]]; then
            export MODS="${{ steps.changed_files_action.outputs.all_changed_files }}"
          elif [[ "${{ inputs.mods }}" != "" ]]; then
            export MODS="${{ inputs.mods }}"
          fi
          echo "::group::Matrix"
          export MATRIX=$(python3 generate_build_matrix.py)
          echo "MATRIX=$MATRIX" >> $GITHUB_OUTPUT
          echo $MATRIX | jq
          echo "::endgroup::"
          echo "::group::Mods"
          export MODS=$(echo $MATRIX | jq '.[].name' | uniq | jq -crn '[ { "name": inputs } ]')
          echo "MODS=$MODS" >> $GITHUB_OUTPUT
          echo $MODS | jq
          echo "::endgroup::"

  build-mod:
    name: ${{ matrix.target.name }} ${{ matrix.target.platform_name }}
    needs: builds
    strategy:
      matrix:
        target: ${{ fromJson(needs.builds.outputs.matrix) }}
      fail-fast: false
    runs-on: ${{ matrix.target.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          ref: ${{ github.ref }}

      # Native build
      - name: Build ${{ matrix.target.name }} ${{ matrix.target.platform_name }}
        if: matrix.target.platform_name != 'wasm'
        uses: threeal/cmake-action@v2.1.0
        with:
          generator: Ninja
          cxx-compiler: clang++
          c-compiler: clang
          build-dir: build
          build-args: --target ${{ matrix.target.name }}

      # WASM build
      - name: Install WASI SDK
        if: matrix.target.platform_name == 'wasm'
        run: |
          curl -LO ${{ env.WASI_SDK_URL }} && \
          dpkg -i wasi-sdk-*-x86_64-linux.deb && \
          rm *.deb && \
          curl -L ${{ env.LIBCLANG_RT_BUILTINS_WASM32_A_URL }} \
            --output /opt/wasi-sdk/share/wasi-sysroot/lib/wasm32-wasi/libclang_rt.builtins-wasm32.a && \
          ln -s /opt/wasi-sdk/share/wasi-sysroot wasm/wasi-sysroot
      - name: Build ${{ matrix.target.name }} wasm
        if: matrix.target.platform_name == 'wasm'
        run: |
          export PATH=$PATH:/opt/wasi-sdk/bin/ && \
          cd wasm && \
          python3 compile_mod.py ${{ matrix.target.name }} && \
          mv ../bin/${{ matrix.target.name }}/game.wasm ../build/bin/${{ matrix.target.name }}/

      - name: Store builds
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.name }}-${{ matrix.target.platform_name }}.zip
          path: build/bin/${{ matrix.target.name }}

  merge-artifacts:
    name: Merge artifacts for ${{ matrix.target.name }}
    needs: build-mod
    strategy:
      matrix:
        target: ${{ fromJson(needs.builds.outputs.mods) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Merge artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: ${{ matrix.target.name }}.zip
          delete-merged: true
          pattern: ${{ matrix.target.name }}-*
